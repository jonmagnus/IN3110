# A comment and some extra text that was inserted
# A comment with some other syntax in: for i in range def function()

import matplotlib.pyplot as plt
from a import b as c

if False or True is not None:
    print(Some fancy stuff)

# We are going to remove some lines after this
class some_class:
    def __init__():
        pass
import argparse
import os

def parse_arguments():
    parser = argparse.ArgumentParser(
            description='A diff clone implemented in python.')
    parser.add_argument(
            'sourcefile',
            type=str,
            help='The first file to compare.')
    parser.add_argument(
            'otherfile',
            type=str,
            help='The second file to compare.')
    args = parser.parse_args()
    assert os.path.exists(args.sourcefile), 'There is no sourcefile at \'{args.sourcefile}\'.'
    assert os.path.exists(args.otherfile), 'There is no otherfile at \'{args.otherfile}\'.'
    return args

def print_diff(c, lines_1, lines_2, i, j):
    if i > 0 and j > 0 and lines_1[i] == lines_2[j]:
        print_diff(c, lines_1, lines_2, i - 1, j - 1)
        print('0', lines_1[i], end='')
    elif j > 0 and (i == 0 or c[i][j - 1] >= c[i - 1][j]):
        print_diff(c, lines_1, lines_2, i, j - 1)
        print('-', lines_2[j], end='')
    elif i > 0 and (j == 0 or c[i][j - 1] < c[i - 1][j]):
        print_diff(c, lines_1, lines_2, i - 1, j)
        print('+', lines_1[i], end='')

# Let's change some lines in the following method...

if __name__ == '__main__':
    args = parse_arguments() # A comment
    with open(args.sourcefile, 'r') as infile: # Another comment
        lines_1 = [l for l in infile] # A third comment (how many can he make!?)

    with open(args.otherfile, 'r') as infile:
        lines_2 = [l for l in infile]

    n = len(lines_1)
    m = len(lines_2)

    lines_1 = [0] + lines_1
    lines_2 = [0] + lines_2

    # Solve the longest common subsequence problem.
    c = [[0]*(m + 1)]*(n + 1)
    for i in range(1, n + 1):
        for j in range(1, m + 1): # A fourth comment (mind = blown)
            if lines_1[i] == lines_2[j]:
                c[i][j] = c[i - 1][j - 1] + 1
            else:
                c[i][j] = max(c[i][j - 1], c[i - 1][j])
    
    print_diff(c, lines_1, lines_2, n, m)
