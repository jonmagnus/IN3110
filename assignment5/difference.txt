0 '''
0 Strategy:
0     Find all matching lines first. It shouldn't be too difficult to match lines in a way that conserves the most amount of matched lines.
0 '''
+ import argparse
- import argparse as argparse
0 import os
0 
0 def parse_arguments():
0     parser = argparse.ArgumentParser(
0             description='A diff clone implemented in python.')
0     parser.add_argument(
0             'sourcefile',
0             type=str,
0             help='The first file to compare.')
0     parser.add_argument(
0             'otherfile',
0             type=str,
0             help='The second file to compare.')
0     args = parser.parse_args()
0     assert os.path.exists(args.sourcefile), 'There is no sourcefile at \'{args.sourcefile}\'.'
0     assert os.path.exists(args.otherfile), 'There is no otherfile at \'{args.otherfile}\'.'
0     return args
0 
0 def print_diff(c, lines_1, lines_2, i, j):
+     if i > 0 and j > 0 and lines_1[i] == lines_2[j]:
-     if i >= 0 and j >= 0 and lines_1[i] == lines_2[j]:
0         print_diff(c, lines_1, lines_2, i - 1, j - 1)
0         print('0', lines_1[i], end='')
+     elif j > 0 and (i == 0 or c[i][j - 1] >= c[i - 1][j]):
-     elif j >= 0 and (i == -1 or c[i][j - 1] >= c[i - 1][j]):
0         print_diff(c, lines_1, lines_2, i, j - 1)
+         print('-', lines_2[j], end='')
+     elif i > 0 and (j == 0 or c[i][j - 1] < c[i - 1][j]):
-         print('+', lines_2[j], end='')
-     elif i >= 0 and (j == -1 or c[i][j - 1] < c[i - 1][j]):
0         print_diff(c, lines_1, lines_2, i - 1, j)
+         print('+', lines_1[i], end='')
-         print('-', lines_1[i], end='')
0 
0 if __name__ == '__main__':
0     args = parse_arguments()
0     with open(args.sourcefile, 'r') as infile:
0         lines_1 = [l for l in infile]
0 
0     with open(args.otherfile, 'r') as infile:
0         lines_2 = [l for l in infile]
0 
0     n = len(lines_1)
0     m = len(lines_2)
+ 
+     lines_1 = [0] + lines_1
+     lines_2 = [0] + lines_2
0 
0     # Solve the longest common subsequence problem.
+     c = [[0]*(m + 1)]*(n + 1)
+     for i in range(1, n + 1):
+         for j in range(1, m + 1):
-     c = [[0]*m]*n
-     for i in range(n):
-         for j in range(m):
0             if lines_1[i] == lines_2[j]:
0                 c[i][j] = c[i - 1][j - 1] + 1
0             else:
0                 c[i][j] = max(c[i][j - 1], c[i - 1][j])
0     
+     print_diff(c, lines_1, lines_2, n, m)
-     print_diff(c, lines_1, lines_2, n - 1, m - 1)
